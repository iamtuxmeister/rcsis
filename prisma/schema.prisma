// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model District {
  id       String   @id @default(cuid())
  name     String
  Address  String
  Address2 String?
  city     String
  state    String
  zipcode  String
  schools  School[]
}

model Article {
  id      Int    @id @default(autoincrement())
  title   String
  content String
}

model SchoolYear {
  id        String   @id @default(cuid())
  current   Boolean
  startDate DateTime
  endDate   DateTime
  school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId  String
  dates     Date[]

  @@index([schoolId])
}

model Date {
  id           String     @id @default(cuid())
  Date         DateTime
  title        String
  description  String?
  type         DateType
  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)
  schoolYearId String

  @@index([schoolYearId])
}

enum DateType {
  INSERVICE
  NO_SCHOOL
  MODIFIED_SCHEDULE
}

model School {
  id          String       @id @default(cuid())
  district    District     @relation(fields: [districtId], references: [id], onDelete: Cascade)
  districtId  String
  name        String
  Address     String
  Address2    String?
  city        String
  state       String
  zipcode     String
  mapUrl      String?
  gradeLevels GradeLevel[]
  buildings   Building[]
  schoolYears SchoolYear[]

  @@index([districtId])
}

model GradeLevel {
  id       String @id @default(cuid())
  order    Int
  title    String
  abbr     String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String

  @@index([schoolId])
}

model Building {
  id          String  @id @default(cuid())
  description String
  school      School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId    String
  mapUrl      String?
  room        Room[]

  @@index([schoolId])
}

model Room {
  id          String   @id @default(cuid())
  number      Int
  description String?
  occupancy   Int?
  building    Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  buildingId  String

  @@index([buildingId])
}

// NextAuth Tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
